<?php
/**
 * OpenApiApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eBay国际物流平台商户接口
 *
 * eBay国际物流平台商户接口
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace backend\modules\v1\services\ebayTrack;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;



/**
 * OpenApiApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultEbayClient
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    protected $url;

    protected $authorization;

    /**@param string          $Url
     * @param string          $Authorization
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        $Url = null,
        $Authorization = null,
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->url = $Url;
        $this->authorization= "Bearer ".$Authorization;
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     *
     * @param backend\modules\v1\services\ebayTrack\ModelInterface $request
     */
    public function execute($request){
		set_time_limit(90);
        $ref=new \ReflectionClass($request);
        $className=preg_replace([
            '/Request$/'
        ], [
            ''
        ], $ref->getShortName());
        $methodName=lcfirst($className);
        return $this->$methodName($request);
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addAddressPreference
     *
     * 新增地址信息
     *
     * @param  backend\modules\v1\services\ebayTrack\AddAddressPreferenceRequest $add_address_preference_request addAddressPreferenceRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\AddAddressPreferenceResponses
     */
    public function addAddressPreference($add_address_preference_request)
    {
        list($response) = $this->addAddressPreferenceWithHttpInfo($add_address_preference_request);
        return $response;
    }

    /**
     * Operation addAddressPreferenceWithHttpInfo
     *
     * 新增地址信息
     *
     * @param  backend\modules\v1\services\ebayTrack\AddAddressPreferenceRequest $add_address_preference_request addAddressPreferenceRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\AddAddressPreferenceResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function addAddressPreferenceWithHttpInfo($add_address_preference_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\AddAddressPreferenceResponses';
        $request = $this->addAddressPreferenceRequest($add_address_preference_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\AddAddressPreferenceResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\AddAddressPreferenceResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addAddressPreferenceAsync
     *
     * 新增地址信息
     *
     * @param  backend\modules\v1\services\ebayTrack\AddAddressPreferenceRequest $add_address_preference_request addAddressPreferenceRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAddressPreferenceAsync($add_address_preference_request)
    {
        return $this->addAddressPreferenceAsyncWithHttpInfo($add_address_preference_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addAddressPreferenceAsyncWithHttpInfo
     *
     * 新增地址信息
     *
     * @param  backend\modules\v1\services\ebayTrack\AddAddressPreferenceRequest $add_address_preference_request addAddressPreferenceRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAddressPreferenceAsyncWithHttpInfo($add_address_preference_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\AddAddressPreferenceResponses';
        $request = $this->addAddressPreferenceRequest($add_address_preference_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addAddressPreference'
     *
     * @param  backend\modules\v1\services\ebayTrack\AddAddressPreferenceRequest $add_address_preference_request addAddressPreferenceRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addAddressPreferenceRequest($add_address_preference_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling addAddressPreference'
            );
        }
        // verify the required parameter 'add_address_preference_request' is set
        if ($add_address_preference_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_address_preference_request when calling addAddressPreference'
            );
        }

        $resourcePath = '/AddAddressPreference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($add_address_preference_request)) {
            $_tempBody = $add_address_preference_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addConsignPreference
     *
     * 新增交运偏好
     *
     * @param  backend\modules\v1\services\ebayTrack\AddConsignPreferenceRequest $add_consign_preference_request addConsignPreferenceRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\AddConsignPreferenceResponses
     */
    public function addConsignPreference($add_consign_preference_request)
    {
        list($response) = $this->addConsignPreferenceWithHttpInfo($add_consign_preference_request);
        return $response;
    }

    /**
     * Operation addConsignPreferenceWithHttpInfo
     *
     * 新增交运偏好
     *
     * @param  backend\modules\v1\services\ebayTrack\AddConsignPreferenceRequest $add_consign_preference_request addConsignPreferenceRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\AddConsignPreferenceResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function addConsignPreferenceWithHttpInfo($add_consign_preference_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\AddConsignPreferenceResponses';
        $request = $this->addConsignPreferenceRequest($add_consign_preference_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\AddConsignPreferenceResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\AddConsignPreferenceResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addConsignPreferenceAsync
     *
     * 新增交运偏好
     *
     * @param  backend\modules\v1\services\ebayTrack\AddConsignPreferenceRequest $add_consign_preference_request addConsignPreferenceRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addConsignPreferenceAsync($add_consign_preference_request)
    {
        return $this->addConsignPreferenceAsyncWithHttpInfo($add_consign_preference_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addConsignPreferenceAsyncWithHttpInfo
     *
     * 新增交运偏好
     *
     * @param  backend\modules\v1\services\ebayTrack\AddConsignPreferenceRequest $add_consign_preference_request addConsignPreferenceRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addConsignPreferenceAsyncWithHttpInfo($add_consign_preference_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\AddConsignPreferenceResponses';
        $request = $this->addConsignPreferenceRequest($add_consign_preference_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addConsignPreference'
     *
     * @param  backend\modules\v1\services\ebayTrack\AddConsignPreferenceRequest $add_consign_preference_request addConsignPreferenceRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addConsignPreferenceRequest($add_consign_preference_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling addConsignPreference'
            );
        }
        // verify the required parameter 'add_consign_preference_request' is set
        if ($add_consign_preference_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_consign_preference_request when calling addConsignPreference'
            );
        }

        $resourcePath = '/AddConsignPreference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($add_consign_preference_request)) {
            $_tempBody = $add_consign_preference_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addPackage
     *
     * 指定物流服务上传包裹
     *
     * @param  backend\modules\v1\services\ebayTrack\AddPackageRequest $add_package_request addPackageRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\AddPackageResponses
     */
    public function addPackage($add_package_request)
    {
        list($response) = $this->addPackageWithHttpInfo($add_package_request);
        return $response;
    }

    /**
     * Operation addPackageWithHttpInfo
     *
     * 指定物流服务上传包裹
     *
     * @param  backend\modules\v1\services\ebayTrack\AddPackageRequest $add_package_request addPackageRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\AddPackageResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function addPackageWithHttpInfo($add_package_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\AddPackageResponses';
        $request = $this->addPackageRequest($add_package_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\AddPackageResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\AddPackageResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addPackageAsync
     *
     * 指定物流服务上传包裹
     *
     * @param  backend\modules\v1\services\ebayTrack\AddPackageRequest $add_package_request addPackageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPackageAsync($add_package_request)
    {
        return $this->addPackageAsyncWithHttpInfo($add_package_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addPackageAsyncWithHttpInfo
     *
     * 指定物流服务上传包裹
     *
     * @param  backend\modules\v1\services\ebayTrack\AddPackageRequest $add_package_request addPackageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPackageAsyncWithHttpInfo($add_package_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\AddPackageResponses';
        $request = $this->addPackageRequest($add_package_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addPackage'
     *
     * @param  backend\modules\v1\services\ebayTrack\AddPackageRequest $add_package_request addPackageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addPackageRequest($add_package_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling addPackage'
            );
        }
        // verify the required parameter 'add_package_request' is set
        if ($add_package_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_package_request when calling addPackage'
            );
        }

        $resourcePath = '/AddPackage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($add_package_request)) {
            $_tempBody = $add_package_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addPackageWithoutService
     *
     * 无指定物流服务上传包裹
     *
     * @param  backend\modules\v1\services\ebayTrack\AddPackageWithoutServiceRequest $add_package_without_service_request addPackageWithoutServiceRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\AddPackageWithoutServiceResponses
     */
    public function addPackageWithoutService($add_package_without_service_request)
    {
        list($response) = $this->addPackageWithoutServiceWithHttpInfo($add_package_without_service_request);
        return $response;
    }

    /**
     * Operation addPackageWithoutServiceWithHttpInfo
     *
     * 无指定物流服务上传包裹
     *
     * @param  backend\modules\v1\services\ebayTrack\AddPackageWithoutServiceRequest $add_package_without_service_request addPackageWithoutServiceRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\AddPackageWithoutServiceResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function addPackageWithoutServiceWithHttpInfo($add_package_without_service_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\AddPackageWithoutServiceResponses';
        $request = $this->addPackageWithoutServiceRequest($add_package_without_service_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\AddPackageWithoutServiceResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\AddPackageWithoutServiceResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addPackageWithoutServiceAsync
     *
     * 无指定物流服务上传包裹
     *
     * @param  backend\modules\v1\services\ebayTrack\AddPackageWithoutServiceRequest $add_package_without_service_request addPackageWithoutServiceRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPackageWithoutServiceAsync($add_package_without_service_request)
    {
        return $this->addPackageWithoutServiceAsyncWithHttpInfo($add_package_without_service_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addPackageWithoutServiceAsyncWithHttpInfo
     *
     * 无指定物流服务上传包裹
     *
     * @param  backend\modules\v1\services\ebayTrack\AddPackageWithoutServiceRequest $add_package_without_service_request addPackageWithoutServiceRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPackageWithoutServiceAsyncWithHttpInfo($add_package_without_service_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\AddPackageWithoutServiceResponses';
        $request = $this->addPackageWithoutServiceRequest($add_package_without_service_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addPackageWithoutService'
     *
     * @param  backend\modules\v1\services\ebayTrack\AddPackageWithoutServiceRequest $add_package_without_service_request addPackageWithoutServiceRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addPackageWithoutServiceRequest($add_package_without_service_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling addPackageWithoutService'
            );
        }
        // verify the required parameter 'add_package_without_service_request' is set
        if ($add_package_without_service_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_package_without_service_request when calling addPackageWithoutService'
            );
        }

        $resourcePath = '/AddPackageWithoutService';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($add_package_without_service_request)) {
            $_tempBody = $add_package_without_service_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assignService
     *
     * 指定包裹物流服务
     *
     * @param  backend\modules\v1\services\ebayTrack\AssignServiceRequest $assign_service_request assignServiceRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\AssignServiceResponses
     */
    public function assignService($assign_service_request)
    {
        list($response) = $this->assignServiceWithHttpInfo($assign_service_request);
        return $response;
    }

    /**
     * Operation assignServiceWithHttpInfo
     *
     * 指定包裹物流服务
     *
     * @param  backend\modules\v1\services\ebayTrack\AssignServiceRequest $assign_service_request assignServiceRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\AssignServiceResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function assignServiceWithHttpInfo($assign_service_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\AssignServiceResponses';
        $request = $this->assignServiceRequest($assign_service_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\AssignServiceResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\AssignServiceResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assignServiceAsync
     *
     * 指定包裹物流服务
     *
     * @param  backend\modules\v1\services\ebayTrack\AssignServiceRequest $assign_service_request assignServiceRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignServiceAsync($assign_service_request)
    {
        return $this->assignServiceAsyncWithHttpInfo($assign_service_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assignServiceAsyncWithHttpInfo
     *
     * 指定包裹物流服务
     *
     * @param  backend\modules\v1\services\ebayTrack\AssignServiceRequest $assign_service_request assignServiceRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignServiceAsyncWithHttpInfo($assign_service_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\AssignServiceResponses';
        $request = $this->assignServiceRequest($assign_service_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assignService'
     *
     * @param  backend\modules\v1\services\ebayTrack\AssignServiceRequest $assign_service_request assignServiceRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function assignServiceRequest($assign_service_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling assignService'
            );
        }
        // verify the required parameter 'assign_service_request' is set
        if ($assign_service_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assign_service_request when calling assignService'
            );
        }

        $resourcePath = '/AssignService';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($assign_service_request)) {
            $_tempBody = $assign_service_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelPackages
     *
     * 取消包裹信息
     *
     * @param  backend\modules\v1\services\ebayTrack\CancelPackagesRequest $cancel_packages_request cancelPackagesRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\CancelPackagesResponses
     */
    public function cancelPackages($cancel_packages_request)
    {
        list($response) = $this->cancelPackagesWithHttpInfo($cancel_packages_request);
        return $response;
    }

    /**
     * Operation cancelPackagesWithHttpInfo
     *
     * 取消包裹信息
     *
     * @param  backend\modules\v1\services\ebayTrack\CancelPackagesRequest $cancel_packages_request cancelPackagesRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\CancelPackagesResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelPackagesWithHttpInfo($cancel_packages_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\CancelPackagesResponses';
        $request = $this->cancelPackagesRequest($cancel_packages_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\CancelPackagesResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\CancelPackagesResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelPackagesAsync
     *
     * 取消包裹信息
     *
     * @param  backend\modules\v1\services\ebayTrack\CancelPackagesRequest $cancel_packages_request cancelPackagesRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPackagesAsync($cancel_packages_request)
    {
        return $this->cancelPackagesAsyncWithHttpInfo($cancel_packages_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelPackagesAsyncWithHttpInfo
     *
     * 取消包裹信息
     *
     * @param  backend\modules\v1\services\ebayTrack\CancelPackagesRequest $cancel_packages_request cancelPackagesRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPackagesAsyncWithHttpInfo($cancel_packages_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\CancelPackagesResponses';
        $request = $this->cancelPackagesRequest($cancel_packages_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelPackages'
     *
     * @param  backend\modules\v1\services\ebayTrack\CancelPackagesRequest $cancel_packages_request cancelPackagesRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelPackagesRequest($cancel_packages_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling cancelPackages'
            );
        }
        // verify the required parameter 'cancel_packages_request' is set
        if ($cancel_packages_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cancel_packages_request when calling cancelPackages'
            );
        }

        $resourcePath = '/CancelPackages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($cancel_packages_request)) {
            $_tempBody = $cancel_packages_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation confirmPackages
     *
     * 确认并交运包裹信息
     *
     * @param  backend\modules\v1\services\ebayTrack\ConfirmPackagesRequest $confirm_packages_request confirmPackagesRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\ConfirmPackagesResponses
     */
    public function confirmPackages($confirm_packages_request)
    {
        list($response) = $this->confirmPackagesWithHttpInfo($confirm_packages_request);
        return $response;
    }

    /**
     * Operation confirmPackagesWithHttpInfo
     *
     * 确认并交运包裹信息
     *
     * @param  backend\modules\v1\services\ebayTrack\ConfirmPackagesRequest $confirm_packages_request confirmPackagesRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\ConfirmPackagesResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function confirmPackagesWithHttpInfo($confirm_packages_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\ConfirmPackagesResponses';
        $request = $this->confirmPackagesRequest($confirm_packages_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\ConfirmPackagesResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\ConfirmPackagesResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation confirmPackagesAsync
     *
     * 确认并交运包裹信息
     *
     * @param  backend\modules\v1\services\ebayTrack\ConfirmPackagesRequest $confirm_packages_request confirmPackagesRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmPackagesAsync($confirm_packages_request)
    {
        return $this->confirmPackagesAsyncWithHttpInfo($confirm_packages_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmPackagesAsyncWithHttpInfo
     *
     * 确认并交运包裹信息
     *
     * @param  backend\modules\v1\services\ebayTrack\ConfirmPackagesRequest $confirm_packages_request confirmPackagesRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmPackagesAsyncWithHttpInfo($confirm_packages_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\ConfirmPackagesResponses';
        $request = $this->confirmPackagesRequest($confirm_packages_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmPackages'
     *
     * @param  backend\modules\v1\services\ebayTrack\ConfirmPackagesRequest $confirm_packages_request confirmPackagesRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function confirmPackagesRequest($confirm_packages_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling confirmPackages'
            );
        }
        // verify the required parameter 'confirm_packages_request' is set
        if ($confirm_packages_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $confirm_packages_request when calling confirmPackages'
            );
        }

        $resourcePath = '/ConfirmPackages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($confirm_packages_request)) {
            $_tempBody = $confirm_packages_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePackages
     *
     * 删除包裹信息
     *
     * @param  backend\modules\v1\services\ebayTrack\DeletePackagesRequest $cancel_packages_request cancelPackagesRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\DeletePackagesResponses
     */
    public function deletePackages($cancel_packages_request)
    {
        list($response) = $this->deletePackagesWithHttpInfo($cancel_packages_request);
        return $response;
    }

    /**
     * Operation deletePackagesWithHttpInfo
     *
     * 删除包裹信息
     *
     * @param  backend\modules\v1\services\ebayTrack\DeletePackagesRequest $cancel_packages_request cancelPackagesRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\DeletePackagesResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePackagesWithHttpInfo($cancel_packages_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\DeletePackagesResponses';
        $request = $this->deletePackagesRequest($cancel_packages_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\DeletePackagesResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\DeletePackagesResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePackagesAsync
     *
     * 删除包裹信息
     *
     * @param  backend\modules\v1\services\ebayTrack\DeletePackagesRequest $cancel_packages_request cancelPackagesRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePackagesAsync($cancel_packages_request)
    {
        return $this->deletePackagesAsyncWithHttpInfo($cancel_packages_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePackagesAsyncWithHttpInfo
     *
     * 删除包裹信息
     *
     * @param  backend\modules\v1\services\ebayTrack\DeletePackagesRequest $cancel_packages_request cancelPackagesRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePackagesAsyncWithHttpInfo($cancel_packages_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\DeletePackagesResponses';
        $request = $this->deletePackagesRequest($cancel_packages_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePackages'
     *
     * @param  backend\modules\v1\services\ebayTrack\DeletePackagesRequest $cancel_packages_request cancelPackagesRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePackagesRequest($cancel_packages_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling deletePackages'
            );
        }
        // verify the required parameter 'cancel_packages_request' is set
        if ($cancel_packages_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cancel_packages_request when calling deletePackages'
            );
        }

        $resourcePath = '/DeletePackages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($cancel_packages_request)) {
            $_tempBody = $cancel_packages_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchToken
     *
     * 登录认证
     *
     * @param  string $authorization 注意：调用SDK时,需传入三个参数(url,devId,secret) (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\FetchTokenResponses
     */
    public function fetchToken($url,$devId,$secret)
    {
		set_time_limit(30);
        list($response) = $this->fetchTokenWithHttpInfo($url,$devId,$secret);
        return $response;
    }

    /**
     * Operation fetchTokenWithHttpInfo
     *
     * 登录认证
     *
     * @param  string $authorization 注意：调用SDK时,需传入三个参数(url,devId,secret) (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\FetchTokenResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchTokenWithHttpInfo($url,$devId,$secret)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\FetchTokenResponses';
        $request = $this->fetchTokenRequest($url,$devId,$secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\FetchTokenResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\FetchTokenResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchTokenAsync
     *
     * 登录认证
     *
     * @param  string $authorization 注意：调用SDK时,需传入三个参数(url,devId,secret) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchTokenAsync($authorization)
    {
        return $this->fetchTokenAsyncWithHttpInfo($authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchTokenAsyncWithHttpInfo
     *
     * 登录认证
     *
     * @param  string $authorization 注意：调用SDK时,需传入三个参数(url,devId,secret) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchTokenAsyncWithHttpInfo($authorization)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\FetchTokenResponses';
        $request = $this->fetchTokenRequest($authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchToken'
     *
     * @param  string $authorization 注意：调用SDK时,需传入三个参数(url,devId,secret) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchTokenRequest($url,$devId,$secret)
    {
        // verify the required parameter 'authorization' is set
        if ($url === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling fetchToken'
            );
        }
        if ($devId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $devId when calling fetchToken'
                );
        }
        if ($secret === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $secret when calling fetchToken'
                );
        }

        $resourcePath = '/FetchToken';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $authorization="Basic ".base64_encode("$devId:$secret");

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getActualCost
     *
     * 获取包裹实际运费
     *
     * @param  backend\modules\v1\services\ebayTrack\GetActualCostRequest $get_actual_cost_request getActualCostRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\GetActualCostResponses
     */
    public function getActualCost($get_actual_cost_request)
    {
        list($response) = $this->getActualCostWithHttpInfo($get_actual_cost_request);
        return $response;
    }

    /**
     * Operation getActualCostWithHttpInfo
     *
     * 获取包裹实际运费
     *
     * @param  backend\modules\v1\services\ebayTrack\GetActualCostRequest $get_actual_cost_request getActualCostRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\GetActualCostResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function getActualCostWithHttpInfo($get_actual_cost_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetActualCostResponses';
        $request = $this->getActualCostRequest($get_actual_cost_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetActualCostResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetActualCostResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getActualCostAsync
     *
     * 获取包裹实际运费
     *
     * @param  backend\modules\v1\services\ebayTrack\GetActualCostRequest $get_actual_cost_request getActualCostRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActualCostAsync($get_actual_cost_request)
    {
        return $this->getActualCostAsyncWithHttpInfo($get_actual_cost_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getActualCostAsyncWithHttpInfo
     *
     * 获取包裹实际运费
     *
     * @param  backend\modules\v1\services\ebayTrack\GetActualCostRequest $get_actual_cost_request getActualCostRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActualCostAsyncWithHttpInfo($get_actual_cost_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetActualCostResponses';
        $request = $this->getActualCostRequest($get_actual_cost_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getActualCost'
     *
     * @param  backend\modules\v1\services\ebayTrack\GetActualCostRequest $get_actual_cost_request getActualCostRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getActualCostRequest($get_actual_cost_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getActualCost'
            );
        }
        // verify the required parameter 'get_actual_cost_request' is set
        if ($get_actual_cost_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_actual_cost_request when calling getActualCost'
            );
        }

        $resourcePath = '/GetActualCost';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($get_actual_cost_request)) {
            $_tempBody = $get_actual_cost_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAddressPreferenceList
     *
     * 获取地址信息列表
     *
     * @param  string $authorization 调用登录认证接口取得的token值 (required)
     * @param  backend\modules\v1\services\ebayTrack\GetAddressPreferenceListRequest $request request (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\GetAddressPreferenceListResponses
     */
    public function getAddressPreferenceList($request)
    {
        list($response) = $this->getAddressPreferenceListWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation getAddressPreferenceListWithHttpInfo
     *
     * 获取地址信息列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetAddressPreferenceListRequest $request request (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\GetAddressPreferenceListResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAddressPreferenceListWithHttpInfo($request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetAddressPreferenceListResponses';
        $request = $this->getAddressPreferenceListRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }


            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetAddressPreferenceListResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetAddressPreferenceListResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAddressPreferenceListAsync
     *
     * 获取地址信息列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetAddressPreferenceListRequest $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAddressPreferenceListAsync($request)
    {
        return $this->getAddressPreferenceListAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAddressPreferenceListAsyncWithHttpInfo
     *
     * 获取地址信息列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetAddressPreferenceListRequest $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAddressPreferenceListAsyncWithHttpInfo($request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetAddressPreferenceListResponses';
        $request = $this->getAddressPreferenceListRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAddressPreferenceList'
     *
     * @param  backend\modules\v1\services\ebayTrack\GetAddressPreferenceListRequest $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAddressPreferenceListRequest($request)
    {
        $authorization=$this->authorization;
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getAddressPreferenceList'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling getAddressPreferenceList'
            );
        }

        $resourcePath = '/GetAddressPreferenceList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAgentList
     *
     * 获取地址信息列表
     *
     * @param  string $authorization 调用登录认证接口取得的token值 (required)
     * @param  backend\modules\v1\services\ebayTrack\GetAgentListRequest $request request (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\GetAgentListResponses
     */
    public function getAgentList($request)
    {
        list($response) = $this->getAgentListWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation getAgentListWithHttpInfo
     *
     * 获取地址信息列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetAgentListRequest $request request (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\GetAgentListResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAgentListWithHttpInfo($request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetAgentListResponses';
        $request = $this->getAgentListRequest($request);
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }


            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetAgentListResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetAgentListResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAgentListAsync
     *
     * 获取地址信息列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetAgentListRequest $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAgentListAsync($request)
    {
        return $this->getAgentListAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAgentListAsyncWithHttpInfo
     *
     * 获取地址信息列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetAgentListRequest $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAgentListAsyncWithHttpInfo($request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\getAgentListResponses';
        $request = $this->getAgentListRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAgentList'
     *
     * @param  backend\modules\v1\services\ebayTrack\GetAgentListRequest $request request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAgentListRequest($request)
    {
        $authorization=$this->authorization;
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getAgentList'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling getAgentList'
            );
        }

        $resourcePath = '/GetAgentList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    /**
     * Operation getBatteryQualList
     *
     * 获取带电资质认证信息列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetBatteryQualListRequest $get_battery_qual_list_request getBatteryQualListRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\GetBatteryQualListResponses
     */
    public function getBatteryQualList( $get_battery_qual_list_request)
    {
        list($response) = $this->getBatteryQualListWithHttpInfo( $get_battery_qual_list_request);
        return $response;
    }

    /**
     * Operation getBatteryQualListWithHttpInfo
     *
     * 获取带电资质认证信息列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetBatteryQualListRequest $get_battery_qual_list_request getBatteryQualListRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\GetBatteryQualListResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBatteryQualListWithHttpInfo( $get_battery_qual_list_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetBatteryQualListResponses';
        $request = $this->getBatteryQualListRequest( $get_battery_qual_list_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetBatteryQualListResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetBatteryQualListResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBatteryQualListAsync
     *
     * 获取带电资质认证信息列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetBatteryQualListRequest $get_battery_qual_list_request getBatteryQualListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBatteryQualListAsync($get_battery_qual_list_request)
    {
        return $this->getBatteryQualListAsyncWithHttpInfo($get_battery_qual_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBatteryQualListAsyncWithHttpInfo
     *
     * 获取带电资质认证信息列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetBatteryQualListRequest $get_battery_qual_list_request getBatteryQualListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBatteryQualListAsyncWithHttpInfo($get_battery_qual_list_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetBatteryQualListResponses';
        $request = $this->getBatteryQualListRequest($get_battery_qual_list_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBatteryQualList'
     *
     * @param  backend\modules\v1\services\ebayTrack\GetBatteryQualListRequest $get_battery_qual_list_request getBatteryQualListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBatteryQualListRequest( $get_battery_qual_list_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getBatteryQualList'
            );
        }
        // verify the required parameter 'get_battery_qual_list_request' is set
        if ($get_battery_qual_list_request === null || (is_array($get_battery_qual_list_request) && count($get_battery_qual_list_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_battery_qual_list_request when calling getBatteryQualList'
            );
        }

        $resourcePath = '/GetBatteryQualList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($get_battery_qual_list_request)) {
            $_tempBody = $get_battery_qual_list_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConsignPreferenceList
     *
     * 获取交运偏好列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetConsignPreferenceListRequest $get_consign_preference_list_request getConsignPreferenceListRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\GetConsignPreferenceListResponses
     */
    public function getConsignPreferenceList($get_consign_preference_list_request)
    {
        list($response) = $this->getConsignPreferenceListWithHttpInfo($get_consign_preference_list_request);
        return $response;
    }

    /**
     * Operation getConsignPreferenceListWithHttpInfo
     *
     * 获取交运偏好列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetConsignPreferenceListRequest $get_consign_preference_list_request getConsignPreferenceListRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\GetConsignPreferenceListResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConsignPreferenceListWithHttpInfo($get_consign_preference_list_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetConsignPreferenceListResponses';
        $request = $this->getConsignPreferenceListRequest($get_consign_preference_list_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetConsignPreferenceListResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetConsignPreferenceListResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConsignPreferenceListAsync
     *
     * 获取交运偏好列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetConsignPreferenceListRequest $get_consign_preference_list_request getConsignPreferenceListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConsignPreferenceListAsync($get_consign_preference_list_request)
    {
        return $this->getConsignPreferenceListAsyncWithHttpInfo($get_consign_preference_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConsignPreferenceListAsyncWithHttpInfo
     *
     * 获取交运偏好列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetConsignPreferenceListRequest $get_consign_preference_list_request getConsignPreferenceListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConsignPreferenceListAsyncWithHttpInfo($get_consign_preference_list_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetConsignPreferenceListResponses';
        $request = $this->getConsignPreferenceListRequest($get_consign_preference_list_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConsignPreferenceList'
     *
     * @param  backend\modules\v1\services\ebayTrack\GetConsignPreferenceListRequest $get_consign_preference_list_request getConsignPreferenceListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConsignPreferenceListRequest($get_consign_preference_list_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization= $this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getConsignPreferenceList'
            );
        }
        // verify the required parameter 'get_consign_preference_list_request' is set
        if ($get_consign_preference_list_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_consign_preference_list_request when calling getConsignPreferenceList'
            );
        }

        $resourcePath = '/GetConsignPreferenceList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($get_consign_preference_list_request)) {
            $_tempBody = $get_consign_preference_list_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDropoffSiteList
     *
     * 获取自送站点列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetDropoffSiteListRequest $get_dropoff_site_list_request getDropoffSiteListRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\GetDropoffSiteListResponses
     */
    public function getDropoffSiteList($get_dropoff_site_list_request)
    {
        list($response) = $this->getDropoffSiteListWithHttpInfo($get_dropoff_site_list_request);
        return $response;
    }

    /**
     * Operation getDropoffSiteListWithHttpInfo
     *
     * 获取自送站点列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetDropoffSiteListRequest $get_dropoff_site_list_request getDropoffSiteListRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\GetDropoffSiteListResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDropoffSiteListWithHttpInfo($get_dropoff_site_list_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetDropoffSiteListResponses';
        $request = $this->getDropoffSiteListRequest($get_dropoff_site_list_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetDropoffSiteListResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetDropoffSiteListResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDropoffSiteListAsync
     *
     * 获取自送站点列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetDropoffSiteListRequest $get_dropoff_site_list_request getDropoffSiteListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDropoffSiteListAsync($get_dropoff_site_list_request)
    {
        return $this->getDropoffSiteListAsyncWithHttpInfo($get_dropoff_site_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDropoffSiteListAsyncWithHttpInfo
     *
     * 获取自送站点列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetDropoffSiteListRequest $get_dropoff_site_list_request getDropoffSiteListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDropoffSiteListAsyncWithHttpInfo($get_dropoff_site_list_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetDropoffSiteListResponses';
        $request = $this->getDropoffSiteListRequest($get_dropoff_site_list_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDropoffSiteList'
     *
     * @param  backend\modules\v1\services\ebayTrack\GetDropoffSiteListRequest $get_dropoff_site_list_request getDropoffSiteListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDropoffSiteListRequest($get_dropoff_site_list_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getDropoffSiteList'
            );
        }
        // verify the required parameter 'get_dropoff_site_list_request' is set
        if ($get_dropoff_site_list_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_dropoff_site_list_request when calling getDropoffSiteList'
            );
        }

        $resourcePath = '/GetDropoffSiteList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($get_dropoff_site_list_request)) {
            $_tempBody = $get_dropoff_site_list_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHandoverSheet
     *
     * 获取交接单打印详情
     *
     * @param  backend\modules\v1\services\ebayTrack\GetHandoverSheetRequest $get_handover_sheet_request getHandoverSheetRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\GetHandoverSheetResponses
     */
    public function getHandoverSheet($get_handover_sheet_request)
    {
        list($response) = $this->getHandoverSheetWithHttpInfo($get_handover_sheet_request);
        return $response;
    }

    /**
     * Operation getHandoverSheetWithHttpInfo
     *
     * 获取交接单打印详情
     *
     * @param  backend\modules\v1\services\ebayTrack\GetHandoverSheetRequest $get_handover_sheet_request getHandoverSheetRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\GetHandoverSheetResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHandoverSheetWithHttpInfo($get_handover_sheet_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetHandoverSheetResponses';
        $request = $this->getHandoverSheetRequest($get_handover_sheet_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetHandoverSheetResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetHandoverSheetResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHandoverSheetAsync
     *
     * 获取交接单打印详情
     *
     * @param  backend\modules\v1\services\ebayTrack\GetHandoverSheetRequest $get_handover_sheet_request getHandoverSheetRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHandoverSheetAsync($get_handover_sheet_request)
    {
        return $this->getHandoverSheetAsyncWithHttpInfo($get_handover_sheet_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHandoverSheetAsyncWithHttpInfo
     *
     * 获取交接单打印详情
     *
     * @param  backend\modules\v1\services\ebayTrack\GetHandoverSheetRequest $get_handover_sheet_request getHandoverSheetRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHandoverSheetAsyncWithHttpInfo($get_handover_sheet_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetHandoverSheetResponses';
        $request = $this->getHandoverSheetRequest($get_handover_sheet_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHandoverSheet'
     *
     * @param  backend\modules\v1\services\ebayTrack\GetHandoverSheetRequest $get_handover_sheet_request getHandoverSheetRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHandoverSheetRequest($get_handover_sheet_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getHandoverSheet'
            );
        }
        // verify the required parameter 'get_handover_sheet_request' is set
        if ($get_handover_sheet_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_handover_sheet_request when calling getHandoverSheet'
            );
        }

        $resourcePath = '/GetHandoverSheet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($get_handover_sheet_request)) {
            $_tempBody = $get_handover_sheet_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemPackageId
     *
     * 查询物品包裹ID
     *
     * @param  backend\modules\v1\services\ebayTrack\GetItemPackageIdRequest $get_item_package_id_request getItemPackageIdRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\GetItemPackageIdResponses
     */
    public function getItemPackageId($get_item_package_id_request)
    {
        list($response) = $this->getItemPackageIdWithHttpInfo($get_item_package_id_request);
        return $response;
    }

    /**
     * Operation getItemPackageIdWithHttpInfo
     *
     * 查询物品包裹ID
     *
     * @param  backend\modules\v1\services\ebayTrack\GetItemPackageIdRequest $get_item_package_id_request getItemPackageIdRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\GetItemPackageIdResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemPackageIdWithHttpInfo($get_item_package_id_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetItemPackageIdResponses';
        $request = $this->getItemPackageIdRequest($get_item_package_id_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetItemPackageIdResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetItemPackageIdResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemPackageIdAsync
     *
     * 查询物品包裹ID
     *
     * @param  backend\modules\v1\services\ebayTrack\GetItemPackageIdRequest $get_item_package_id_request getItemPackageIdRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemPackageIdAsync($get_item_package_id_request)
    {
        return $this->getItemPackageIdAsyncWithHttpInfo($get_item_package_id_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemPackageIdAsyncWithHttpInfo
     *
     * 查询物品包裹ID
     *
     * @param  backend\modules\v1\services\ebayTrack\GetItemPackageIdRequest $get_item_package_id_request getItemPackageIdRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemPackageIdAsyncWithHttpInfo($get_item_package_id_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetItemPackageIdResponses';
        $request = $this->getItemPackageIdRequest($get_item_package_id_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemPackageId'
     *
     * @param  backend\modules\v1\services\ebayTrack\GetItemPackageIdRequest $get_item_package_id_request getItemPackageIdRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getItemPackageIdRequest($get_item_package_id_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getItemPackageId'
            );
        }
        // verify the required parameter 'get_item_package_id_request' is set
        if ($get_item_package_id_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_item_package_id_request when calling getItemPackageId'
            );
        }

        $resourcePath = '/GetItemPackageId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($get_item_package_id_request)) {
            $_tempBody = $get_item_package_id_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLabel
     *
     * 获取面单打印详情
     *
     * @param  backend\modules\v1\services\ebayTrack\GetLabelRequest $get_label_request getLabelRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\GetLabelResponses
     */
    public function getLabel($get_label_request)
    {
        list($response) = $this->getLabelWithHttpInfo($get_label_request);
        return $response;
    }

    /**
     * Operation getLabelWithHttpInfo
     *
     * 获取面单打印详情
     *
     * @param  backend\modules\v1\services\ebayTrack\GetLabelRequest $get_label_request getLabelRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\GetLabelResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLabelWithHttpInfo($get_label_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetLabelResponses';
        $request = $this->getLabelRequest($get_label_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetLabelResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetLabelResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLabelAsync
     *
     * 获取面单打印详情
     *
     * @param  backend\modules\v1\services\ebayTrack\GetLabelRequest $get_label_request getLabelRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLabelAsync($get_label_request)
    {
        return $this->getLabelAsyncWithHttpInfo($get_label_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLabelAsyncWithHttpInfo
     *
     * 获取面单打印详情
     *
     * @param  backend\modules\v1\services\ebayTrack\GetLabelRequest $get_label_request getLabelRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLabelAsyncWithHttpInfo($get_label_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetLabelResponses';
        $request = $this->getLabelRequest($get_label_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLabel'
     *
     * @param  backend\modules\v1\services\ebayTrack\GetLabelRequest $get_label_request getLabelRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLabelRequest($get_label_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getLabel'
            );
        }
        // verify the required parameter 'get_label_request' is set
        if ($get_label_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_label_request when calling getLabel'
            );
        }

        $resourcePath = '/GetLabel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($get_label_request)) {
            $_tempBody = $get_label_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPackageDetail
     *
     * 获取包裹详情
     *
     * @param  backend\modules\v1\services\ebayTrack\GetPackageDetailRequest $get_package_detail_request getPackageDetailRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\GetPackageDetailResponses
     */
    public function getPackageDetail($get_package_detail_request)
    {
        list($response) = $this->getPackageDetailWithHttpInfo($get_package_detail_request);
        return $response;
    }

    /**
     * Operation getPackageDetailWithHttpInfo
     *
     * 获取包裹详情
     *
     * @param  backend\modules\v1\services\ebayTrack\GetPackageDetailRequest $get_package_detail_request getPackageDetailRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\GetPackageDetailResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPackageDetailWithHttpInfo($get_package_detail_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetPackageDetailResponses';
        $request = $this->getPackageDetailRequest($get_package_detail_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetPackageDetailResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetPackageDetailResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPackageDetailAsync
     *
     * 获取包裹详情
     *
     * @param  backend\modules\v1\services\ebayTrack\GetPackageDetailRequest $get_package_detail_request getPackageDetailRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPackageDetailAsync($get_package_detail_request)
    {
        return $this->getPackageDetailAsyncWithHttpInfo($get_package_detail_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPackageDetailAsyncWithHttpInfo
     *
     * 获取包裹详情
     *
     * @param  backend\modules\v1\services\ebayTrack\GetPackageDetailRequest $get_package_detail_request getPackageDetailRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPackageDetailAsyncWithHttpInfo($get_package_detail_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetPackageDetailResponses';
        $request = $this->getPackageDetailRequest($get_package_detail_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPackageDetail'
     *
     * @param  backend\modules\v1\services\ebayTrack\GetPackageDetailRequest $get_package_detail_request getPackageDetailRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPackageDetailRequest($get_package_detail_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getPackageDetail'
            );
        }
        // verify the required parameter 'get_package_detail_request' is set
        if ($get_package_detail_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_package_detail_request when calling getPackageDetail'
            );
        }

        $resourcePath = '/GetPackageDetail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($get_package_detail_request)) {
            $_tempBody = $get_package_detail_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPackageStatus
     *
     * 获取包裹状态
     *
     * @param  backend\modules\v1\services\ebayTrack\GetPackageStatusRequest $get_package_status_request getPackageStatusRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\GetPackageStatusResponses
     */
    public function getPackageStatus($get_package_status_request)
    {
        list($response) = $this->getPackageStatusWithHttpInfo($get_package_status_request);
        return $response;
    }

    /**
     * Operation getPackageStatusWithHttpInfo
     *
     * 获取包裹状态
     *
     * @param  backend\modules\v1\services\ebayTrack\GetPackageStatusRequest $get_package_status_request getPackageStatusRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\GetPackageStatusResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPackageStatusWithHttpInfo($get_package_status_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetPackageStatusResponses';
        $request = $this->getPackageStatusRequest($get_package_status_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetPackageStatusResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetPackageStatusResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPackageStatusAsync
     *
     * 获取包裹状态
     *
     * @param  backend\modules\v1\services\ebayTrack\GetPackageStatusRequest $get_package_status_request getPackageStatusRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPackageStatusAsync($get_package_status_request)
    {
        return $this->getPackageStatusAsyncWithHttpInfo($get_package_status_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPackageStatusAsyncWithHttpInfo
     *
     * 获取包裹状态
     *
     * @param  backend\modules\v1\services\ebayTrack\GetPackageStatusRequest $get_package_status_request getPackageStatusRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPackageStatusAsyncWithHttpInfo($get_package_status_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetPackageStatusResponses';
        $request = $this->getPackageStatusRequest($get_package_status_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPackageStatus'
     *
     * @param  backend\modules\v1\services\ebayTrack\GetPackageStatusRequest $get_package_status_request getPackageStatusRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPackageStatusRequest($get_package_status_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getPackageStatus'
            );
        }
        // verify the required parameter 'get_package_status_request' is set
        if ($get_package_status_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_package_status_request when calling getPackageStatus'
            );
        }

        $resourcePath = '/GetPackageStatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($get_package_status_request)) {
            $_tempBody = $get_package_status_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }



    /**
     * Operation getServiceList
     *
     * 获取物流服务列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetServiceListRequest $get_service_list_request getServiceListRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\GetServiceListResponses
     */
    public function getServiceList($get_service_list_request)
    {
        list($response) = $this->getServiceListWithHttpInfo($get_service_list_request);
        return $response;
    }

    /**
     * Create request for operation 'getServiceList'
     *
     * @param  backend\modules\v1\services\ebayTrack\GetServiceListRequest $get_service_list_request getServiceListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getServiceListRequest($get_service_list_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getServiceList'
            );
        }
        // verify the required parameter 'get_service_list_request' is set
        if ($get_service_list_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_service_list_request when calling getServiceList'
            );
        }

        $resourcePath = '/GetServiceList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($get_service_list_request)) {
            $_tempBody = $get_service_list_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    /**
     * Operation getServiceListWithHttpInfo
     *
     * 获取物流服务列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetServiceListRequest $get_service_list_request getServiceListRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\GetServiceListResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function getServiceListWithHttpInfo($get_service_list_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetServiceListResponses';
        $request = $this->getServiceListRequest($get_service_list_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetServiceListResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetServiceListResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getServiceListAsync
     *
     * 获取物流服务列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetServiceListRequest $get_service_list_request getServiceListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getServiceListAsync($get_service_list_request)
    {
        return $this->getServiceListAsyncWithHttpInfo($get_service_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getServiceListAsyncWithHttpInfo
     *
     * 获取物流服务列表
     *
     * @param  backend\modules\v1\services\ebayTrack\GetServiceListRequest $get_service_list_request getServiceListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getServiceListAsyncWithHttpInfo($get_service_list_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetServiceListResponses';
        $request = $this->getServiceListRequest($get_service_list_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }


    /**
     * Operation getTrackingDetail
     *
     * 获取包裹物流跟踪信息
     *
     * @param  string $authorization 调用登录认证接口取得的token值 (required)
     * @param  backend\modules\v1\services\ebayTrack\GetTrackingDetailRequest $get_tracking_detail_request getTrackingDetailRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\GetTrackingDetailResponses
     */
    public function getTrackingDetail($get_tracking_detail_request)
    {
        list($response) = $this->getTrackingDetailWithHttpInfo($get_tracking_detail_request);
        return $response;
    }

    /**
     * Operation getTrackingDetailWithHttpInfo
     *
     * 获取包裹物流跟踪信息
     *
     * @param  backend\modules\v1\services\ebayTrack\GetTrackingDetailRequest $get_tracking_detail_request getTrackingDetailRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\GetTrackingDetailResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTrackingDetailWithHttpInfo($get_tracking_detail_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetTrackingDetailResponses';
        $request = $this->getTrackingDetailRequest($get_tracking_detail_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetTrackingDetailResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\GetTrackingDetailResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTrackingDetailAsync
     *
     * 获取包裹物流跟踪信息
     *
     * @param  backend\modules\v1\services\ebayTrack\GetTrackingDetailRequest $get_tracking_detail_request getTrackingDetailRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrackingDetailAsync($get_tracking_detail_request)
    {
        return $this->getTrackingDetailAsyncWithHttpInfo($get_tracking_detail_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTrackingDetailAsyncWithHttpInfo
     *
     * 获取包裹物流跟踪信息
     *
     * @param  backend\modules\v1\services\ebayTrack\GetTrackingDetailRequest $get_tracking_detail_request getTrackingDetailRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrackingDetailAsyncWithHttpInfo($get_tracking_detail_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetTrackingDetailResponses';
        $request = $this->getTrackingDetailRequest($get_tracking_detail_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTrackingDetail'
     *
     * @param  backend\modules\v1\services\ebayTrack\GetTrackingDetailRequest $get_tracking_detail_request getTrackingDetailRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTrackingDetailRequest($get_tracking_detail_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getTrackingDetail'
            );
        }
        // verify the required parameter 'get_tracking_detail_request' is set
        if ($get_tracking_detail_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_tracking_detail_request when calling getTrackingDetail'
            );
        }

        $resourcePath = '/GetTrackingDetail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($get_tracking_detail_request)) {
            $_tempBody = $get_tracking_detail_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recreatePackage
     *
     * 重新发货
     *
     * @param  backend\modules\v1\services\ebayTrack\RecreatePackageRequest $recreate_package_request recreatePackageRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\RecreatePackageResponses
     */
    public function recreatePackage($recreate_package_request)
    {
        list($response) = $this->recreatePackageWithHttpInfo($recreate_package_request);
        return $response;
    }

    /**
     * Operation recreatePackageWithHttpInfo
     *
     * 重新发货
     *
     * @param  backend\modules\v1\services\ebayTrack\RecreatePackageRequest $recreate_package_request recreatePackageRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\RecreatePackageResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function recreatePackageWithHttpInfo($recreate_package_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\RecreatePackageResponses';
        $request = $this->recreatePackageRequest($recreate_package_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\RecreatePackageResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\RecreatePackageResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recreatePackageAsync
     *
     * 重新发货
     *
     * @param  backend\modules\v1\services\ebayTrack\RecreatePackageRequest $recreate_package_request recreatePackageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recreatePackageAsync($recreate_package_request)
    {
        return $this->recreatePackageAsyncWithHttpInfo($recreate_package_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recreatePackageAsyncWithHttpInfo
     *
     * 重新发货
     *
     * @param  backend\modules\v1\services\ebayTrack\RecreatePackageRequest $recreate_package_request recreatePackageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recreatePackageAsyncWithHttpInfo($recreate_package_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\RecreatePackageResponses';
        $request = $this->recreatePackageRequest($recreate_package_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recreatePackage'
     *
     * @param  backend\modules\v1\services\ebayTrack\RecreatePackageRequest $recreate_package_request recreatePackageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function recreatePackageRequest($recreate_package_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling recreatePackage'
            );
        }
        // verify the required parameter 'recreate_package_request' is set
        if ($recreate_package_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recreate_package_request when calling recreatePackage'
            );
        }

        $resourcePath = '/RecreatePackage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($recreate_package_request)) {
            $_tempBody = $recreate_package_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAddressPreference
     *
     * 更新地址信息
     *
     * @param  backend\modules\v1\services\ebayTrack\UpdateAddressPreferenceRequest $update_address_preference_request updateAddressPreferenceRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\UpdateAddressPreferenceResponses
     */
    public function updateAddressPreference($update_address_preference_request)
    {
        list($response) = $this->updateAddressPreferenceWithHttpInfo($update_address_preference_request);
        return $response;
    }

    /**
     * Operation updateAddressPreferenceWithHttpInfo
     *
     * 更新地址信息
     *
     * @param  backend\modules\v1\services\ebayTrack\UpdateAddressPreferenceRequest $update_address_preference_request updateAddressPreferenceRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\UpdateAddressPreferenceResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAddressPreferenceWithHttpInfo($update_address_preference_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\UpdateAddressPreferenceResponses';
        $request = $this->updateAddressPreferenceRequest($update_address_preference_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\UpdateAddressPreferenceResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\UpdateAddressPreferenceResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAddressPreferenceAsync
     *
     * 更新地址信息
     *
     * @param  backend\modules\v1\services\ebayTrack\UpdateAddressPreferenceRequest $update_address_preference_request updateAddressPreferenceRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAddressPreferenceAsync($update_address_preference_request)
    {
        return $this->updateAddressPreferenceAsyncWithHttpInfo($update_address_preference_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAddressPreferenceAsyncWithHttpInfo
     *
     * 更新地址信息
     *
     * @param  backend\modules\v1\services\ebayTrack\UpdateAddressPreferenceRequest $update_address_preference_request updateAddressPreferenceRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAddressPreferenceAsyncWithHttpInfo($update_address_preference_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\UpdateAddressPreferenceResponses';
        $request = $this->updateAddressPreferenceRequest($update_address_preference_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAddressPreference'
     *
     * @param  backend\modules\v1\services\ebayTrack\UpdateAddressPreferenceRequest $update_address_preference_request updateAddressPreferenceRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAddressPreferenceRequest($update_address_preference_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling updateAddressPreference'
            );
        }
        // verify the required parameter 'update_address_preference_request' is set
        if ($update_address_preference_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_address_preference_request when calling updateAddressPreference'
            );
        }

        $resourcePath = '/UpdateAddressPreference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($update_address_preference_request)) {
            $_tempBody = $update_address_preference_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateConsignPreference
     *
     * 更新交运偏好
     *
     * @param  backend\modules\v1\services\ebayTrack\UpdateConsignPreferenceRequest $update_consign_preference_request updateConsignPreferenceRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\UpdateConsignPreferenceResponses
     */
    public function updateConsignPreference($update_consign_preference_request)
    {
        list($response) = $this->updateConsignPreferenceWithHttpInfo($update_consign_preference_request);
        return $response;
    }

    /**
     * Operation updateConsignPreferenceWithHttpInfo
     *
     * 更新交运偏好
     *
     * @param  backend\modules\v1\services\ebayTrack\UpdateConsignPreferenceRequest $update_consign_preference_request updateConsignPreferenceRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\UpdateConsignPreferenceResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateConsignPreferenceWithHttpInfo($update_consign_preference_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\UpdateConsignPreferenceResponses';
        $request = $this->updateConsignPreferenceRequest($update_consign_preference_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\UpdateConsignPreferenceResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\UpdateConsignPreferenceResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateConsignPreferenceAsync
     *
     * 更新交运偏好
     *
     * @param  backend\modules\v1\services\ebayTrack\UpdateConsignPreferenceRequest $update_consign_preference_request updateConsignPreferenceRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateConsignPreferenceAsync($update_consign_preference_request)
    {
        return $this->updateConsignPreferenceAsyncWithHttpInfo($update_consign_preference_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateConsignPreferenceAsyncWithHttpInfo
     *
     * 更新交运偏好
     *
     * @param  backend\modules\v1\services\ebayTrack\UpdateConsignPreferenceRequest $update_consign_preference_request updateConsignPreferenceRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateConsignPreferenceAsyncWithHttpInfo($update_consign_preference_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\UpdateConsignPreferenceResponses';
        $request = $this->updateConsignPreferenceRequest($update_consign_preference_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateConsignPreference'
     *
     * @param  backend\modules\v1\services\ebayTrack\UpdateConsignPreferenceRequest $update_consign_preference_request updateConsignPreferenceRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateConsignPreferenceRequest($update_consign_preference_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling updateConsignPreference'
            );
        }
        // verify the required parameter 'update_consign_preference_request' is set
        if ($update_consign_preference_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_consign_preference_request when calling updateConsignPreference'
            );
        }

        $resourcePath = '/UpdateConsignPreference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($update_consign_preference_request)) {
            $_tempBody = $update_consign_preference_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Operation confirmPackage
     *
     * 交运单个包裹
     *
     * @param  backend\modules\v1\services\ebayTrack\ConfirmPackageRequest $confirm_package_request confirmPackageRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\ConfirmPackageResponses
     */
    public function confirmPackage($confirm_package_request)
    {
        list($response) = $this->confirmPackageWithHttpInfo($confirm_package_request);
        return $response;
    }

    /**
     * Operation confirmPackageAsync
     *
     * 交运单个包裹
     *
     * @param  backend\modules\v1\services\ebayTrack\ConfirmPackageRequest $confirm_package_request confirmPackageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmPackageAsync($confirm_package_request)
    {
        return $this->confirmPackageAsyncWithHttpInfo($confirm_package_request)
        ->then(
            function ($response) {
                return $response[0];
            }
            );
    }


    /**
     * Operation confirmPackageAsyncWithHttpInfo
     *
     * 交运单个包裹
     *
     * @param  backend\modules\v1\services\ebayTrack\ConfirmPackageRequest $confirm_package_request confirmPackageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmPackageAsyncWithHttpInfo($confirm_package_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\ConfirmPackageResponses';
        $request = $this->confirmPackageRequest($confirm_package_request);

        return $this->client
        ->sendAsync($request, $this->createHttpClientOption())
        ->then(
            function ($response) use ($returnType) {
                $responseBody = $response->getBody();
                if ($returnType === '\SplFileObject') {
                    $content = $responseBody; //stream goes to serializer
                } else {
                    $content = $responseBody->getContents();
                    if ($returnType !== 'string') {
                        $content = json_decode($content);
                    }
                }

                return [
                    ObjectSerializer::deserialize($content, $returnType, []),
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
            },
            function ($exception) {
                $response = $exception->getResponse();
                $statusCode = $response->getStatusCode();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $exception->getRequest()->getUri()
                        ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                    );
            }
            );
    }

    /**
     * Operation confirmPackageWithHttpInfo
     *
     * 交运单个包裹
     *
     * @param  backend\modules\v1\services\ebayTrack\ConfirmPackageRequest $confirm_package_request confirmPackageRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\ConfirmPackageResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function confirmPackageWithHttpInfo($confirm_package_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\ConfirmPackageResponses';
        $request = $this->confirmPackageRequest($confirm_package_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                        ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                    );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    'backend\modules\v1\services\ebayTrack\ConfirmPackageResponses',
                    $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    'backend\modules\v1\services\ebayTrack\ConfirmPackageResponses',
                    $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'confirmPackage'
     *
     * @param  backend\modules\v1\services\ebayTrack\ConfirmPackageRequest $confirm_package_request confirmPackageRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function confirmPackageRequest($confirm_package_request)
    {
        $authorization=$this->authorization;
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling confirmPackage'
                );
        }
        // verify the required parameter 'confirm_package_request' is set
        if ($confirm_package_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $confirm_package_request when calling confirmPackage'
                );
        }

        $resourcePath = '/ConfirmPackage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($confirm_package_request)) {
            $_tempBody = $confirm_package_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
                );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
                );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
            );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
            );
    }

    /**
     * Operation getLabelList
     *
     * æ¹éæå°é¢å
     *
     * @param  backend\modules\v1\services\ebayTrack\GetLabelListRequest $get_label_list_request getLabelListRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\GetLabelListResponses
     */
    public function getLabelList($get_label_list_request)
    {
        list($response) = $this->getLabelListWithHttpInfo($get_label_list_request);
        return $response;
    }

    /**
     * Operation getLabelListWithHttpInfo
     *
     * @param  backend\modules\v1\services\ebayTrack\GetLabelListRequest $get_label_list_request getLabelListRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\GetLabelListResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLabelListWithHttpInfo($get_label_list_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetLabelListResponses';
        $request = $this->getLabelListRequest($get_label_list_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                        ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                    );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    'backend\modules\v1\services\ebayTrack\GetLabelListResponses',
                    $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    'backend\modules\v1\services\ebayTrack\GetLabelListResponses',
                    $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLabelListAsync
     *
     * @param  backend\modules\v1\services\ebayTrack\GetLabelListRequest $get_label_list_request getLabelListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLabelListAsync($get_label_list_request)
    {
        return $this->getLabelListAsyncWithHttpInfo($get_label_list_request)
        ->then(
            function ($response) {
                return $response[0];
            }
            );
    }

    /**
     * Operation getLabelListAsyncWithHttpInfo
     *
     * @param  backend\modules\v1\services\ebayTrack\GetLabelListRequest $get_label_list_request getLabelListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLabelListAsyncWithHttpInfo($get_label_list_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\GetLabelListResponses';
        $request = $this->getLabelListRequest($get_label_list_request);

        return $this->client
        ->sendAsync($request, $this->createHttpClientOption())
        ->then(
            function ($response) use ($returnType) {
                $responseBody = $response->getBody();
                if ($returnType === '\SplFileObject') {
                    $content = $responseBody; //stream goes to serializer
                } else {
                    $content = $responseBody->getContents();
                    if ($returnType !== 'string') {
                        $content = json_decode($content);
                    }
                }

                return [
                    ObjectSerializer::deserialize($content, $returnType, []),
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
            },
            function ($exception) {
                $response = $exception->getResponse();
                $statusCode = $response->getStatusCode();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $exception->getRequest()->getUri()
                        ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                    );
            }
            );
    }

    /**
     * Create request for operation 'getLabelList'
     *
     * @param  backend\modules\v1\services\ebayTrack\GetLabelListRequest $get_label_list_request getLabelListRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLabelListRequest($get_label_list_request)
    {
        $authorization=$this->authorization;
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getLabelList'
                );
        }
        // verify the required parameter 'get_label_list_request' is set
        if ($get_label_list_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_label_list_request when calling getLabelList'
                );
        }

        $resourcePath = '/GetLabelList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($get_label_list_request)) {
            $_tempBody = $get_label_list_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
                );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
                );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
            );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
            );
    }


    /**
     * Operation addComplaint
     *
     * 新增超时揽收申诉
     *
     * @param  backend\modules\v1\services\ebayTrack\AddComplaintRequest $add_complaint_request addComplaintRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return backend\modules\v1\services\ebayTrack\AddComplaintResponses
     */
    public function addComplaint($add_complaint_request)
    {
        list($response) = $this->addComplaintRequestWithHttpInfo($add_complaint_request);
        return $response;
    }

    /**
     * Operation addComplaintRequestWithHttpInfo
     *
     * 新增超时揽收申诉
     *
     * @param  backend\modules\v1\services\ebayTrack\AddComplaintRequest $add_complaint_request addComplaintRequest (required)
     *
     * @throws backend\modules\v1\services\ebayTrack\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of backend\modules\v1\services\ebayTrack\AddComplaintResponses, HTTP status code, HTTP response headers (array of strings)
     */
    public function addComplaintRequestWithHttpInfo($add_complaint_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\AddComplaintResponses';
        $request = $this->addComplaintRequest($add_complaint_request);
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\AddComplaintResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'backend\modules\v1\services\ebayTrack\AddComplaintResponses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'addComplaint'
     *
     * @param  backend\modules\v1\services\ebayTrack\AddComplaintRequest $add_complaint_request addComplaintRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addComplaintRequest($add_complaint_request)
    {
        // verify the required parameter 'authorization' is set
        $authorization=$this->authorization;
        if ($authorization === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling AddComplaint'
            );
        }
        // verify the required parameter 'add_complaint_request' is set
        if ($add_complaint_request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_complaint_request when calling AddComplaint'
            );
        }

        $resourcePath = '/AddComplaint';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($add_complaint_request)) {
            $_tempBody = $add_complaint_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->url . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    /**
     * Operation addComplaintAsync
     *
     * 新增地址信息
     *
     * @param  backend\modules\v1\services\ebayTrack\AddComplaintRequest $add_complaint_request addComplaintRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addComplaintAsync($add_complaint_request)
    {
        return $this->addComplaintAsyncWithHttpInfo($add_complaint_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addComplaintAsyncWithHttpInfo
     *
     * 新增地址信息
     *
     * @param  backend\modules\v1\services\ebayTrack\AddComplaintRequest $add_complaint_request addComplaintRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addComplaintAsyncWithHttpInfo($add_complaint_request)
    {
        $returnType = 'backend\modules\v1\services\ebayTrack\AddComplaintResponses';
        $request = $this->addComplaintRequest($add_complaint_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }


}
